import asyncio
import subprocess
from telethon import TelegramClient, events
import os
from dotenv import load_dotenv
import time
import ccxt
import requests
import re
from src.utils import extract_symbol, extract_exchange, is_borrowable_gate
from datetime import datetime, timedelta
from src.utils import calculate_average_buy_price, calculate_average_sell_price
from typing import Dict, List, Optional, Tuple

load_dotenv()

class ArbitrageBot:
    def __init__(self):
        self.api_id = os.getenv('APP_ID')
        self.api_hash = os.getenv('APP_HASH')
        self.deposit = 10  # –¥–µ–ø–æ–∑–∏—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        self.use_validation = True  # True - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π, False - –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.simultaneously = True  # True - –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, False - –Ω–µ—Ç
        self.last_signal_time = None
        self.min_interval = timedelta(minutes=1)
        
        # Rate limiting –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_call_times = {}
        self.max_api_calls_per_minute = 60
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
        self.client = TelegramClient(
            'arbitrage_session245',
            self.api_id,
            self.api_hash,
            auto_reconnect=True,
            connection_retries=None,
            request_retries=1,
            system_version='4.16.30-vxCUSTOM'
        )
        
        # –ö—ç—à –¥–ª—è –±–∏—Ä–∂ –∏ –∏—Ö —Ä—ã–Ω–∫–æ–≤
        self.exchanges = {}
        self.markets_cache = {}
        self.markets_cache_time = None
        self.cache_duration = timedelta(minutes=5)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂
        self.exchange_configs = {
            'mexc': {
                'class': ccxt.mexc,
                'params': {
                    'apiKey': os.getenv('MEXC_KEY'),
                    'secret': os.getenv('MEXC_SECRET'),
                }
            },
            'bitget': {
                'class': ccxt.bitget,
                'params': {
                    'apiKey': os.getenv('BITGET_KEY'),
                    'secret': os.getenv('BITGET_SECRET'),
                    'password': os.getenv('BITGET_PASSWORD'),
                }
            },
            'okx': {
                'class': ccxt.okx,
                'params': {
                    'apiKey': os.getenv('OKX_KEY'),
                    'secret': os.getenv('OKX_SECRET'),
                    'password': os.getenv('OKX_PASSWORD'),
                }
            },
            'gate': {
                'class': ccxt.gate,
                'params': {
                    'apiKey': os.getenv('GATE_KEY'),
                    'secret': os.getenv('GATE_SECRET'),
                }
            },
            'kucoin': {
                'class': ccxt.kucoin,
                'params': {
                    'apiKey': os.getenv('KUCOIN_KEY'),
                    'secret': os.getenv('KUCOIN_SECRET'),
                    'password': os.getenv('KUCOIN_PASSWORD'),
                }
            }
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ –±–∏—Ä–∂ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
        self.buyer_exchanges = ['bitget', 'okx', 'mexc']
        self.seller_exchanges = ['gate', 'kucoin']
        
        print(f"üîç –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º ${self.deposit} | "
              f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if self.use_validation else '–≤—ã–∫–ª—é—á–µ–Ω–∞'} | "
              f"{'–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏' if self.simultaneously else '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏'}")

    def get_exchange(self, exchange_name: str):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏"""
        if exchange_name not in self.exchanges:
            if exchange_name in self.exchange_configs:
                config = self.exchange_configs[exchange_name]
                self.exchanges[exchange_name] = config['class'](config['params'])
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
        return self.exchanges[exchange_name]

    def get_markets(self, exchange_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–∏—Ä–∂–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
        if (self.markets_cache_time is None or 
            current_time - self.markets_cache_time > self.cache_duration):
            self.markets_cache = {}
            self.markets_cache_time = current_time
        
        if exchange_name not in self.markets_cache:
            try:
                exchange = self.get_exchange(exchange_name)
                markets = exchange.load_markets()
                self.markets_cache[exchange_name] = list(markets.keys())
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä—ã–Ω–∫–∏ –¥–ª—è {exchange_name}: {len(self.markets_cache[exchange_name])} —Å–∏–º–≤–æ–ª–æ–≤")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤ –¥–ª—è {exchange_name}: {e}")
                self.markets_cache[exchange_name] = []
        
        return self.markets_cache[exchange_name]

    def calculate_prices(self, symbol: str, buy_exchange: str, sell_exchange: str) -> Tuple[Optional[float], Optional[float]]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏"""
        buy_price = None
        sell_price = None
        
        try:
            # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            if buy_exchange in self.buyer_exchanges:
                exchange = self.get_exchange(buy_exchange)
                buy_price = calculate_average_buy_price(self.deposit, symbol, exchange)
                print(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ {buy_exchange}: {buy_price}")
            
            # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
            if sell_exchange in self.seller_exchanges:
                exchange = self.get_exchange(sell_exchange)
                sell_price = calculate_average_sell_price(self.deposit, symbol, exchange)
                print(f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {sell_exchange}: {sell_price}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω: {e}")
        
        return buy_price, sell_price

    def _validate_api_keys(self, buy_exchange: str, sell_exchange: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π"""
        exchanges_to_check = [buy_exchange, sell_exchange]
        
        for exchange_name in exchanges_to_check:
            if exchange_name not in self.exchange_configs:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞: {exchange_name}")
                return False
            
            config = self.exchange_configs[exchange_name]
            required_keys = ['apiKey', 'secret']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            for key in required_keys:
                if not config['params'].get(key):
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key} –¥–ª—è {exchange_name.upper()}")
                    return False
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–∏—Ä–∂ —Å –ø–∞—Ä–æ–ª–µ–º
            if exchange_name in ['bitget', 'okx', 'kucoin']:
                if not config['params'].get('password'):
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç password –¥–ª—è {exchange_name.upper()}")
                    return False
        
        print("‚úÖ API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã")
        return True

    def _sanitize_log_output(self, output: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not output:
            return output
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        sensitive_patterns = [
            (r'api[_-]?key["\']?\s*[:=]\s*["\']?([^"\'\s]+)', r'api_key="***"'),
            (r'secret["\']?\s*[:=]\s*["\']?([^"\'\s]+)', r'secret="***"'),
            (r'password["\']?\s*[:=]\s*["\']?([^"\'\s]+)', r'password="***"'),
            (r'token["\']?\s*[:=]\s*["\']?([^"\'\s]+)', r'token="***"'),
        ]
        
        sanitized = output
        for pattern, replacement in sensitive_patterns:
            sanitized = re.sub(pattern, replacement, sanitized, flags=re.IGNORECASE)
        
        return sanitized

    def _check_rate_limit(self, exchange_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limiting –¥–ª—è API"""
        current_time = datetime.now()
        minute_ago = current_time - timedelta(minutes=1)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if exchange_name in self.api_call_times:
            self.api_call_times[exchange_name] = [
                call_time for call_time in self.api_call_times[exchange_name]
                if call_time > minute_ago
            ]
        else:
            self.api_call_times[exchange_name] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.api_call_times[exchange_name]) >= self.max_api_calls_per_minute:
            print(f"‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {exchange_name}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
        self.api_call_times[exchange_name].append(current_time)
        return True

    def check_margin_availability(self, symbol: str, sell_exchange: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            base, quote = symbol.split("/")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Gate.io
            if sell_exchange == 'gate':
                return is_borrowable_gate(f"{base}_USDT", "https://api.gateio.ws", "/api/v4")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è KuCoin
            elif sell_exchange == 'kucoin':
                url = 'https://api.kucoin.com/api/v1/margin/config'
                response = requests.get(url, timeout=10)
                response.raise_for_status()
                data = response.json()
                
                if data.get("code") != "200000":
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—Ä–∂–∏ KuCoin: {data}")
                    return False
                
                currency_list = data.get("data", {}).get("currencyList", [])
                return base in currency_list
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä—è–µ–º Gate.io (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            else:
                return is_borrowable_gate(f"{base}_USDT", "https://api.gateio.ws", "/api/v4")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {sell_exchange or 'gate'}: {e}")
            return False

    def validate_arbitrage(self, symbol: str, buy_exchange: str, sell_exchange: str, 
                          buy_price: float, sell_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        print('üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–æ–∫...')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 0: –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–µ–π
        if not self._validate_api_keys(buy_exchange, sell_exchange):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –±–∏—Ä–∂–∞—Ö
        if buy_exchange not in self.buyer_exchanges:
            print('‚ùå –£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏')
            return False
            
        if sell_exchange not in self.seller_exchanges:
            print('‚ùå –£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –±–∏—Ä–∂–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏')
            return False
        
        buy_markets = self.get_markets(buy_exchange)
        sell_markets = self.get_markets(sell_exchange)
        
        if symbol not in buy_markets:
            print(f'‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ –ø–æ–∫—É–ø–∫–∏: {buy_exchange.upper()}')
            return False
            
        if symbol not in sell_markets:
            print(f'‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ –ø—Ä–æ–¥–∞–∂–∏: {sell_exchange.upper()}')
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
        if buy_price is None or sell_price is None:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã')
            return False
            
        if buy_price >= sell_price:
            print('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 2 - –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏')
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        if not self.check_margin_availability(symbol, sell_exchange):
            print('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 3 - –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–µ—Ç –∑–∞–µ–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤')
            return False
        
        print(f'‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1 - —Å–∏–º–≤–æ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {buy_exchange.upper()} –∏ {sell_exchange.upper()}')
        print('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 2 - —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∏–∂–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏')
        print('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 3 - –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞')
        return True

    def execute_trades(self, symbol: str, buy_exchange: str, sell_exchange: str):
        str_deposit = str(self.deposit)
        # –ü–æ–∫—É–ø–∫–∞
        filled_amount = self._run_trade_script(buy_exchange, symbol, str_deposit, "–ü–æ–∫—É–ø–∫–∞", wait=True)
        # –ü—Ä–æ–¥–∞–∂–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
        if filled_amount:
            self._run_trade_script(sell_exchange, symbol, str_deposit, "–ü—Ä–æ–¥–∞–∂–∞", wait=False, filled_amount=filled_amount)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç")

    def _run_trade_script(self, exchange: str, symbol: str, deposit: str, 
                         operation: str, wait: bool = False, filled_amount: float = None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è command injection
            if not re.match(r'^[a-z]+$', exchange):
                print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –±–∏—Ä–∂–∏: {exchange}")
                return None
            
            if not re.match(r'^[A-Z0-9]+/[A-Z0-9]+$', symbol):
                print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {symbol}")
                return None
                
            if not re.match(r'^\d+$', deposit):
                print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: {deposit}")
                return None
            
            script_path = f'./src/{exchange}.py'
            print(f"üöÄ {operation} - –ó–∞–ø—É—Å–∫ {exchange}.py...")
            
            cmd = ['python3', script_path, symbol, deposit]
            if filled_amount is not None:
                if not isinstance(filled_amount, (int, float)) or filled_amount < 0:
                    print(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {filled_amount}")
                    return None
                cmd.append(str(filled_amount))
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            process = subprocess.Popen(
                cmd, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE, 
                text=True,
                cwd=os.getcwd(),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                env=os.environ    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            )
            
            if wait:
                stdout, stderr = process.communicate()
                success = process.returncode == 0
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                safe_stdout = self._sanitize_log_output(stdout)
                print(f"üìã {exchange}.py stdout:\n{safe_stdout}")
                if stderr:
                    safe_stderr = self._sanitize_log_output(stderr)
                    print(f"üìã {exchange}.py stderr:\n{safe_stderr}")
                print(f"üìã {exchange}.py return code: {process.returncode}")
                
                if not success:
                    print(f"‚ö†Ô∏è {exchange}.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    if stderr:
                        print(f"–û—à–∏–±–∫–∞: {stderr}")
                    return None
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏–∑ –≤—ã–≤–æ–¥–∞
                for line in stdout.split('\n'):
                    if line.startswith('FILLED_AMOUNT:'):
                        try:
                            amount = float(line.split(':', 1)[1])
                            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: {amount}")
                            return amount
                        except (ValueError, IndexError) as e:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏–∑ –≤—ã–≤–æ–¥–∞: {e}")
                            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {line}")
                            return None
                
                print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ã–≤–æ–¥–µ")
                print("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞:")
                for i, line in enumerate(stdout.split('\n')):
                    if line.strip():
                        print(f"  {i}: {line}")
                return None
            else:
                return True
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {exchange}.py: {e}")
            return None

    async def handle_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        current_time = datetime.now()
        print("TELETHON - üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @ArbitrageSmartBot")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        if (self.last_signal_time and 
            (current_time - self.last_signal_time) < self.min_interval):
            print(f"TELETHON - ‚è≥ –°–∏–≥–Ω–∞–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
                  f"(–∏–Ω—Ç–µ—Ä–≤–∞–ª < {self.min_interval.seconds} —Å–µ–∫)")
            return
        
        sender = await event.get_sender()
        
        if not (sender.bot and not event.fwd_from):
            print("TELETHON - ‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –æ—Ç –±–æ—Ç–∞)")
            return
        
        self.last_signal_time = current_time
        text = event.message.message
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        symbol = extract_symbol(text)
        buy_exchange, sell_exchange = extract_exchange(text)
        
        if not symbol:
            print("TELETHON - ‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
        
        print(f"üí± –ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª: {symbol}")
        print(f"üìä –ë–∏—Ä–∂–∞ –ø–æ–∫—É–ø–∫–∏: {buy_exchange.upper()} ‚Üí –ë–∏—Ä–∂–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_exchange.upper()}")
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω
        buy_price, sell_price = self.calculate_prices(symbol, buy_exchange, sell_exchange)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        if self.use_validation:
            if self.validate_arbitrage(symbol, buy_exchange, sell_exchange, buy_price, sell_price):
                self.execute_trades(symbol, buy_exchange, sell_exchange)
        else:
            print('üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫...')
            self.execute_trades(symbol, buy_exchange, sell_exchange)

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        @self.client.on(events.NewMessage(chats='ArbitrageSmartBot'))
        async def handler(event):
            await self.handle_message(event)
        
        await self.client.start()
        print("TELETHON - üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç @ArbitrageSmartBot...")
        await self.client.run_until_disconnected()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ArbitrageBot()
    with bot.client:
        bot.client.loop.run_until_complete(bot.start())

if __name__ == "__main__":
    main()