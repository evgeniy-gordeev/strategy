import time
import base64
import hmac
import hashlib
import requests
import sys
import uuid
import os
import json
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv('KUCOIN_KEY')
API_SECRET = os.getenv('KUCOIN_SECRET')
API_PASSPHRASE = os.getenv('KUCOIN_PASSWORD')

symbol = sys.argv[1] if len(sys.argv) > 1 else None
symbol = symbol.replace("/", "-") #–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å kucoin —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ PENGU-USDT

deposit_limit = int(sys.argv[2]) if len(sys.argv) > 2 else None

BASE_URL = 'https://api.kucoin.com'

import sys
sys.stdout.reconfigure(encoding='utf-8')


def sign(method, endpoint, body=''):
    now = str(int(time.time() * 1000))
    str_to_sign = now + method.upper() + endpoint + body
    signature = base64.b64encode(
        hmac.new(API_SECRET.encode('utf-8'), str_to_sign.encode('utf-8'), hashlib.sha256).digest()
    ).decode()
    passphrase = base64.b64encode(
        hmac.new(API_SECRET.encode('utf-8'), API_PASSPHRASE.encode('utf-8'), hashlib.sha256).digest()
    ).decode()
    return {
        "KC-API-KEY": API_KEY,
        "KC-API-SIGN": signature,
        "KC-API-TIMESTAMP": now,
        "KC-API-PASSPHRASE": passphrase,
        "KC-API-KEY-VERSION": "2",
        "Content-Type": "application/json"
    }


def get_price(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
    url = f"{BASE_URL}/api/v1/market/orderbook/level1?symbol={symbol}"
    r = requests.get(url).json()
    data = r.get("data")
    if r.get("code") != "200000" or not data:
        print(f"KUCOIN - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {r}")
        sys.exit(1)
    return {
        'bid': float(data.get('bestBid', 0)),
        'ask': float(data.get('bestAsk', 0)),
        'price': float(data.get('price', 0))
    }


def get_margin_account():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    endpoint = '/api/v1/margin/account'
    url = BASE_URL + endpoint
    headers = sign("GET", endpoint)
    r = requests.get(url, headers=headers).json()
    if r.get("code") != "200000":
        print(f"KUCOIN - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {r}")
        sys.exit(1)
    return r['data']


def get_usdt_balance():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π USDT –±–∞–ª–∞–Ω—Å –≤ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    account_data = get_margin_account()
    accounts = account_data['accounts']
    for asset in accounts:
        if asset['currency'] == 'USDT':
            return float(asset['availableBalance'])
    
    print("KUCOIN - ‚ùå USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cross margin –∞–∫–∫–∞—É–Ω—Ç–µ")
    sys.exit(1)


def get_margin_position(currency):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–∞–ª—é—Ç—ã"""
    account_data = get_margin_account()
    accounts = account_data['accounts']
    for asset in accounts:
        if asset['currency'] == currency:
            return {
                'currency': currency,
                'total': float(asset.get('totalBalance', 0)),
                'available': float(asset.get('availableBalance', 0)),
                'liability': float(asset.get('liability', 0)),
                'interest': float(asset.get('interest', 0))
            }
    return None


def place_margin_sell_order(symbol, base_amount, symbol_info):
    """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (—à–æ—Ä—Ç)"""
    endpoint = '/api/v1/margin/order'
    url = BASE_URL + endpoint
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è API
    formatted_amount = format_amount_for_api(base_amount, symbol_info['baseIncrement'])
    
    body = {
        "symbol": symbol,
        "side": "sell",
        "type": "market",
        "size": formatted_amount,
        "autoBorrow": True,
        "clientOid": str(uuid.uuid4())
    }
    body_str = json.dumps(body)
    headers = sign("POST", endpoint, body_str)
    response = requests.post(url, headers=headers, data=body_str)
    return response.json()


def place_margin_buy_order(symbol, base_amount):
    """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É (–∑–∞–∫—Ä—ã—Ç—å —à–æ—Ä—Ç –∏–ª–∏ –ª–æ–Ω–≥)"""
    endpoint = '/api/v1/margin/order'
    url = BASE_URL + endpoint
    body = {
        "symbol": symbol,
        "side": "buy",
        "type": "market",
        "size": str(base_amount),
        "autoBorrow": True,
        "clientOid": str(uuid.uuid4())
    }
    body_str = json.dumps(body)
    headers = sign("POST", endpoint, body_str)
    response = requests.post(url, headers=headers, data=body_str)
    return response.json()


def get_margin_limits():
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
    endpoint = '/api/v1/margin/config'
    url = BASE_URL + endpoint
    headers = sign("GET", endpoint)
    r = requests.get(url, headers=headers).json()
    return r


def print_margin_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
    prices = get_price(symbol)
    print(f"KUCOIN - üí± –¶–µ–Ω–∞ {symbol}: {prices['price']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
    usdt_balance = get_usdt_balance()
    print(f"KUCOIN - –î–æ—Å—Ç—É–ø–Ω–æ USDT: {usdt_balance}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ TON
    base_currency = symbol.split('-')[0]  # TON
    ton_position = get_margin_position(base_currency)
    if ton_position:
        print(f"KUCOIN - –ü–æ–∑–∏—Ü–∏—è {base_currency}: {ton_position['total']} (–∑–∞–µ–º: {ton_position['liability']})")


def get_symbol_info(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    url = f"{BASE_URL}/api/v1/symbols"
    r = requests.get(url).json()
    if r.get("code") != "200000":
        print(f"KUCOIN - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {r}")
        return None
    
    data = r.get("data", [])
    for item in data:
        if item['symbol'] == symbol:
            return {
                'symbol': symbol,
                'baseCurrency': item['baseCurrency'],
                'quoteCurrency': item['quoteCurrency'],
                'baseIncrement': float(item['baseIncrement']),
                'quoteIncrement': float(item['quoteIncrement']),
                'baseMinSize': float(item['baseMinSize']),
                'quoteMinSize': float(item['quoteMinSize'])
            }
    return None


def round_to_increment(amount, increment):
    """–û–∫—Ä—É–≥–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞"""
    if increment == 0:
        return amount
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è increment
    decimal_places = len(str(increment).split('.')[-1]) if '.' in str(increment) else 0
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ increment
    rounded = round(amount / increment) * increment
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤
    return round(rounded, decimal_places)


def format_amount_for_api(amount, increment):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤"""
    if increment == 0:
        return str(amount)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è increment
    decimal_places = len(str(increment).split('.')[-1]) if '.' in str(increment) else 0
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    rounded = round(amount / increment) * increment
    formatted = round(rounded, decimal_places)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤
    return f"{formatted:.{decimal_places}f}".rstrip('0').rstrip('.')


def main():
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        print("KUCOIN - ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    filled_amount = float(sys.argv[3]) if len(sys.argv) > 3 else None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    prices = get_price(symbol)
    usdt_available = get_usdt_balance()
    usdt_to_use = min(usdt_available, deposit_limit)
    
    if usdt_to_use <= 0:
        print("KUCOIN - ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        sys.exit(1)
    
    if filled_amount and filled_amount > 0:
        base_amount = filled_amount
    else:
        base_amount = usdt_to_use / prices['bid']
        base_amount = round_to_increment(base_amount, symbol_info['baseIncrement'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    if base_amount < symbol_info['baseMinSize']:
        print(f"KUCOIN - ‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {base_amount} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {symbol_info['baseMinSize']}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ USDT
    order_value = base_amount * prices['bid']
    if order_value < symbol_info['quoteMinSize']:
        print(f"KUCOIN - ‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ {order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {symbol_info['quoteMinSize']} USDT")
        sys.exit(1)
    
    print(f"KUCOIN - üí∞ –î–æ—Å—Ç—É–ø–Ω–æ {usdt_to_use} USDT ‚Äî –ø—Ä–æ–¥–∞–µ–º {base_amount} {symbol.split('-')[0]}")
    
    result = place_margin_sell_order(symbol, base_amount, symbol_info)
    
    if result.get("code") == "200000":
        print(f"KUCOIN - ‚úÖ –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: {base_amount} {symbol.split('-')[0]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        time.sleep(2)  # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        print_margin_status()
        
    else:
        print(f"KUCOIN - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {result}")
        print("KUCOIN - ‚ùå –£–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å")
        sys.exit(1)


if __name__ == "__main__":
    main()
