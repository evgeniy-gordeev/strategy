import time
import base64
import hmac
import hashlib
import requests
import sys
import uuid
import os
import json
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv('KUCOIN_KEY')
API_SECRET = os.getenv('KUCOIN_SECRET')
API_PASSPHRASE = os.getenv('KUCOIN_PASSWORD')

symbol = 'TON-USDT'
BASE_URL = 'https://api.kucoin.com'


def sign(method, endpoint, body=''):
    now = str(int(time.time() * 1000))
    str_to_sign = now + method.upper() + endpoint + body
    signature = base64.b64encode(
        hmac.new(API_SECRET.encode('utf-8'), str_to_sign.encode('utf-8'), hashlib.sha256).digest()
    ).decode()
    passphrase = base64.b64encode(
        hmac.new(API_SECRET.encode('utf-8'), API_PASSPHRASE.encode('utf-8'), hashlib.sha256).digest()
    ).decode()
    return {
        "KC-API-KEY": API_KEY,
        "KC-API-SIGN": signature,
        "KC-API-TIMESTAMP": now,
        "KC-API-PASSPHRASE": passphrase,
        "KC-API-KEY-VERSION": "2",
        "Content-Type": "application/json"
    }


def get_price(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
    url = f"{BASE_URL}/api/v1/market/orderbook/level1?symbol={symbol}"
    r = requests.get(url).json()
    data = r.get("data")
    if r.get("code") != "200000" or not data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {r}")
        sys.exit(1)
    return {
        'bid': float(data.get('bestBid', 0)),
        'ask': float(data.get('bestAsk', 0)),
        'price': float(data.get('price', 0))
    }


def get_margin_account():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    endpoint = '/api/v1/margin/account'
    url = BASE_URL + endpoint
    headers = sign("GET", endpoint)
    r = requests.get(url, headers=headers).json()
    if r.get("code") != "200000":
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {r}")
        sys.exit(1)
    return r['data']


def get_margin_position(currency):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–∞–ª—é—Ç—ã"""
    account_data = get_margin_account()
    accounts = account_data['accounts']
    for asset in accounts:
        if asset['currency'] == currency:
            return {
                'currency': currency,
                'total': float(asset.get('totalBalance', 0)),
                'available': float(asset.get('availableBalance', 0)),
                'liability': float(asset.get('liability', 0)),
                'interest': float(asset.get('interest', 0))
            }
    return None


def format_amount_for_api(amount, increment):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤"""
    if increment == 0:
        return str(amount)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è increment
    decimal_places = len(str(increment).split('.')[-1]) if '.' in str(increment) else 0
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    rounded = round(amount / increment) * increment
    formatted = round(rounded, decimal_places)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤
    return f"{formatted:.{decimal_places}f}".rstrip('0').rstrip('.')


def place_margin_buy_order(symbol, base_amount, symbol_info):
    """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É (–∑–∞–∫—Ä—ã—Ç—å —à–æ—Ä—Ç)"""
    endpoint = '/api/v1/margin/order'
    url = BASE_URL + endpoint
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è API
    formatted_amount = format_amount_for_api(base_amount, symbol_info['baseIncrement'])
    
    body = {
        "symbol": symbol,
        "side": "buy",
        "type": "market",
        "size": formatted_amount,
        "autoBorrow": True,
        "clientOid": str(uuid.uuid4())
    }
    body_str = json.dumps(body)
    headers = sign("POST", endpoint, body_str)
    response = requests.post(url, headers=headers, data=body_str)
    return response.json()


def repay_margin_debt(currency, size):
    """–ü–æ–≥–∞—Å–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–ª–≥"""
    endpoint = '/api/v1/margin/repay/single'
    url = BASE_URL + endpoint
    body = {
        "currency": currency,
        "size": str(size)
    }
    body_str = json.dumps(body)
    headers = sign("POST", endpoint, body_str)
    response = requests.post(url, headers=headers, data=body_str)
    return response.json()


def print_margin_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print("üìä –°—Ç–∞—Ç—É—Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
    prices = get_price(symbol)
    print(f"üí± –¶–µ–Ω–∞ {symbol}: Bid={prices['bid']}, Ask={prices['ask']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ TON
    base_currency = symbol.split('-')[0]  # TON
    ton_position = get_margin_position(base_currency)
    if ton_position:
        print(f"ü™ô –ü–æ–∑–∏—Ü–∏—è {base_currency}:")
        print(f"   –í—Å–µ–≥–æ: {ton_position['total']}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {ton_position['available']}")
        print(f"   –ó–∞–µ–º: {ton_position['liability']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {ton_position['interest']}")
        
        if ton_position['liability'] > 0:
            print(f"‚ö†Ô∏è  –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ–ª–≥ –ø–æ {base_currency}: {ton_position['liability']}")
    else:
        print(f"‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {base_currency}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ USDT
    usdt_position = get_margin_position('USDT')
    if usdt_position:
        print(f"üí∞ –ü–æ–∑–∏—Ü–∏—è USDT:")
        print(f"   –í—Å–µ–≥–æ: {usdt_position['total']}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {usdt_position['available']}")
        print(f"   –ó–∞–µ–º: {usdt_position['liability']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {usdt_position['interest']}")


def get_symbol_info(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
    url = f"{BASE_URL}/api/v1/symbols"
    r = requests.get(url).json()
    if r.get("code") != "200000":
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {r}")
        return None
    
    data = r.get("data", [])
    for item in data:
        if item['symbol'] == symbol:
            return {
                'symbol': symbol,
                'baseCurrency': item['baseCurrency'],
                'quoteCurrency': item['quoteCurrency'],
                'baseIncrement': float(item['baseIncrement']),
                'quoteIncrement': float(item['quoteIncrement']),
                'baseMinSize': float(item['baseMinSize']),
                'quoteMinSize': float(item['quoteMinSize'])
            }
    return None


def round_to_increment(amount, increment):
    """–û–∫—Ä—É–≥–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞"""
    if increment == 0:
        return amount
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è increment
    decimal_places = len(str(increment).split('.')[-1]) if '.' in str(increment) else 0
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ increment
    rounded = round(amount / increment) * increment
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤
    return round(rounded, decimal_places)


def check_usdt_balance():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT"""
    usdt_position = get_margin_position('USDT')
    if usdt_position:
        return usdt_position['available']
    return 0


def calculate_required_usdt(ton_debt, price):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞"""
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π (1%)
    required_usdt = ton_debt * price * 1.01
    return required_usdt


def main():
    print("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π KuCoin")
    print("=" * 45)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print_margin_status()
    print()
    
    base_currency = symbol.split('-')[0]  # TON
    ton_position = get_margin_position(base_currency)
    
    if not ton_position or ton_position['liability'] <= 0:
        print("‚ÑπÔ∏è  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    prices = get_price(symbol)
    debt_amount = ton_position['liability']
    total_debt_with_interest = debt_amount + ton_position['interest']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
    usdt_balance = check_usdt_balance()
    required_usdt = calculate_required_usdt(total_debt_with_interest, prices['ask'])
    
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")
    print(f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è USDT: {required_usdt:.2f}")
    
    if usdt_balance < required_usdt:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞!")
        print(f"   –ù—É–∂–Ω–æ: {required_usdt:.2f} USDT")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance:.2f} USDT")
        print(f"   –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {required_usdt - usdt_balance:.2f} USDT")
        return
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
    total_debt_with_interest = round_to_increment(total_debt_with_interest, symbol_info['baseIncrement'])
    
    print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–µ:")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: {debt_amount} {base_currency}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {ton_position['interest']} {base_currency}")
    print(f"   –í—Å–µ–≥–æ –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é: {total_debt_with_interest} {base_currency}")
    print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è: ~{total_debt_with_interest * prices['ask']:.2f} USDT")
    print()
    
    print(f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—é {total_debt_with_interest} {base_currency} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏...")
    
    # –ü–æ–∫—É–ø–∞–µ–º TON –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–∏
    result = place_margin_buy_order(symbol, total_debt_with_interest, symbol_info)
    
    if result.get("code") == "200000":
        print(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–æ–∑–¥–∞–Ω!")
        print(f"   ID –æ—Ä–¥–µ—Ä–∞: {result['data']['orderId']}")
        print()
        
        # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        print("‚è≥ –û–∂–∏–¥–∞—é –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...")
        time.sleep(5)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
        print_margin_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≥–∞—Å–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –¥–æ–ª–≥
        updated_position = get_margin_position(base_currency)
        if updated_position and updated_position['liability'] > 0.000001:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
            print(f"\nüí≥ –ü–æ–≥–∞—à–∞—é –æ—Å—Ç–∞–≤—à–∏–π—Å—è –¥–æ–ª–≥: {updated_position['liability']} {base_currency}")
            repay_result = repay_margin_debt(base_currency, updated_position['liability'])
            if repay_result.get("code") == "200000":
                print("‚úÖ –î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞: {repay_result}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π:")
        print_margin_status()
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {result}")
        print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {result.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        print(f"   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")


if __name__ == "__main__":
    main() 