import time
import base64
import hmac
import hashlib
import requests
import os
import json
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

API_KEY = os.getenv('KUCOIN_KEY')
API_SECRET = os.getenv('KUCOIN_SECRET')
API_PASSPHRASE = os.getenv('KUCOIN_PASSWORD')

symbol = 'TON-USDT'
BASE_URL = 'https://api.kucoin.com'


def sign(method, endpoint, body=''):
    now = str(int(time.time() * 1000))
    str_to_sign = now + method.upper() + endpoint + body
    signature = base64.b64encode(
        hmac.new(API_SECRET.encode('utf-8'), str_to_sign.encode('utf-8'), hashlib.sha256).digest()
    ).decode()
    passphrase = base64.b64encode(
        hmac.new(API_SECRET.encode('utf-8'), API_PASSPHRASE.encode('utf-8'), hashlib.sha256).digest()
    ).decode()
    return {
        "KC-API-KEY": API_KEY,
        "KC-API-SIGN": signature,
        "KC-API-TIMESTAMP": now,
        "KC-API-PASSPHRASE": passphrase,
        "KC-API-KEY-VERSION": "2",
        "Content-Type": "application/json"
    }


def get_price(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
    url = f"{BASE_URL}/api/v1/market/orderbook/level1?symbol={symbol}"
    r = requests.get(url).json()
    data = r.get("data")
    if r.get("code") != "200000" or not data:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {r}")
        return None
    return {
        'bid': float(data.get('bestBid', 0)),
        'ask': float(data.get('bestAsk', 0)),
        'price': float(data.get('price', 0))
    }


def get_margin_account():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    endpoint = '/api/v1/margin/account'
    url = BASE_URL + endpoint
    headers = sign("GET", endpoint)
    r = requests.get(url, headers=headers).json()
    if r.get("code") != "200000":
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {r}")
        return None
    return r['data']


def get_margin_position(currency):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–∞–ª—é—Ç—ã"""
    account_data = get_margin_account()
    if not account_data:
        return None
    
    accounts = account_data['accounts']
    for asset in accounts:
        if asset['currency'] == currency:
            return {
                'currency': currency,
                'total': float(asset.get('totalBalance', 0)),
                'available': float(asset.get('availableBalance', 0)),
                'liability': float(asset.get('liability', 0)),
                'interest': float(asset.get('interest', 0))
            }
    return None


def calculate_margin_level():
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏"""
    account_data = get_margin_account()
    if not account_data:
        return None
    
    total_asset_of_quote_currency = float(account_data.get('totalAssetOfQuoteCurrency', 0))
    total_liability_of_quote_currency = float(account_data.get('totalLiabilityOfQuoteCurrency', 0))
    
    if total_liability_of_quote_currency == 0:
        return float('inf')  # –ù–µ—Ç –¥–æ–ª–≥–æ–≤
    
    margin_level = total_asset_of_quote_currency / total_liability_of_quote_currency
    return margin_level


def get_margin_risk_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    account_data = get_margin_account()
    if not account_data:
        return None
    
    return {
        'debtRatio': float(account_data.get('debtRatio', 0)),
        'totalAssetOfQuoteCurrency': float(account_data.get('totalAssetOfQuoteCurrency', 0)),
        'totalLiabilityOfQuoteCurrency': float(account_data.get('totalLiabilityOfQuoteCurrency', 0)),
        'marginLevel': calculate_margin_level()
    }


def print_detailed_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
    prices = get_price(symbol)
    if not prices:
        return
    
    print(f"üí± –¶–µ–Ω–∞ {symbol}:")
    print(f"   Bid: {prices['bid']:.6f} USDT")
    print(f"   Ask: {prices['ask']:.6f} USDT")
    print(f"   –°–ø—Ä–µ–¥: {(prices['ask'] - prices['bid']):.6f} USDT ({((prices['ask'] - prices['bid']) / prices['bid'] * 100):.3f}%)")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–∞—Ö
    risk_info = get_margin_risk_info()
    if risk_info:
        print("‚öñÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∂–µ:")
        print(f"   –û–±—â–∏–µ –∞–∫—Ç–∏–≤—ã: {risk_info['totalAssetOfQuoteCurrency']:.2f} USDT")
        print(f"   –û–±—â–∏–µ –¥–æ–ª–≥–∏: {risk_info['totalLiabilityOfQuoteCurrency']:.2f} USDT")
        print(f"   –£—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏: {risk_info['marginLevel']:.2f}")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–≥–∞: {risk_info['debtRatio']:.4f}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
        if risk_info['marginLevel'] < 1.5:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ò–°–ö! –£—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π!")
        elif risk_info['marginLevel'] < 2.0:
            print("‚ö†Ô∏è  –í–´–°–û–ö–ò–ô –†–ò–°–ö! –£—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏ –Ω–∏–∑–∫–∏–π!")
        elif risk_info['marginLevel'] < 3.0:
            print("‚ö° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–∑–∏—Ü–∏–µ–π.")
        else:
            print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏.")
        print()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ TON
    base_currency = symbol.split('-')[0]  # TON
    ton_position = get_margin_position(base_currency)
    if ton_position and (ton_position['total'] != 0 or ton_position['liability'] != 0):
        print(f"ü™ô –ü–æ–∑–∏—Ü–∏—è {base_currency}:")
        print(f"   –í—Å–µ–≥–æ: {ton_position['total']:.6f}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {ton_position['available']:.6f}")
        print(f"   –ó–∞–µ–º: {ton_position['liability']:.6f}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {ton_position['interest']:.6f}")
        
        if ton_position['liability'] > 0:
            total_debt = ton_position['liability'] + ton_position['interest']
            debt_value = total_debt * prices['ask']
            print(f"   üí∏ –û–±—â–∏–π –¥–æ–ª–≥: {total_debt:.6f} {base_currency} (~{debt_value:.2f} USDT)")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L –¥–ª—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–∏
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –±—ã–ª–∞ –±–ª–∏–∑–∫–∞ –∫ —Ç–µ–∫—É—â–µ–π bid —Ü–µ–Ω–µ
            # (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç, –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫)
            estimated_entry_price = prices['bid']  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
            current_exit_price = prices['ask']  # –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ (–ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è)
            
            pnl_per_unit = estimated_entry_price - current_exit_price
            estimated_pnl = pnl_per_unit * ton_position['liability']
            
            print(f"   üìä –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π P&L: {estimated_pnl:.2f} USDT")
            if estimated_pnl > 0:
                print(f"   üìà –ü–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∏–±—ã–ª–∏")
            else:
                print(f"   üìâ –ü–æ–∑–∏—Ü–∏—è –≤ —É–±—ã—Ç–∫–µ")
        print()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ USDT
    usdt_position = get_margin_position('USDT')
    if usdt_position and (usdt_position['total'] != 0 or usdt_position['liability'] != 0):
        print(f"üí∞ –ü–æ–∑–∏—Ü–∏—è USDT:")
        print(f"   –í—Å–µ–≥–æ: {usdt_position['total']:.2f}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {usdt_position['available']:.2f}")
        print(f"   –ó–∞–µ–º: {usdt_position['liability']:.2f}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {usdt_position['interest']:.6f}")
        print()


def monitor_continuous(interval=30):
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {interval} —Å–µ–∫—É–Ω–¥")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print()
    
    try:
        while True:
            print_detailed_status()
            print(f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
            print("=" * 60)
            print()
            time.sleep(interval)
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


def main():
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π KuCoin")
    print("=" * 50)
    print()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print_detailed_status()
    
    # –°–ø—Ä–æ—Å–∏—Ç—å –æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    choice = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? (y/N): ")
    if choice.lower() == 'y':
        interval_input = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ")
        try:
            interval = int(interval_input) if interval_input else 30
        except ValueError:
            interval = 30
        monitor_continuous(interval)


if __name__ == "__main__":
    main() 